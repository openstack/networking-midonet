[tox]
envlist = docs,py27,py37,pep8
minversion = 2.0
skipsdist = True

[testenv]
setenv = VIRTUAL_ENV={envdir}
         PYTHONWARNINGS=default::DeprecationWarning
usedevelop = True
deps = -c{env:UPPER_CONSTRAINTS_FILE:https://releases.openstack.org/constraints/upper/train}
       -r{toxinidir}/requirements.txt
       -r{toxinidir}/tox-test-requirements.txt
commands = stestr run {posargs}

[tox:jenkins]
sitepackages = True

[testenv:pep8]
basepython = python3
commands =
  flake8
  doc8 doc/source devstack releasenotes/source specs rally-jobs
  {toxinidir}/tools/coding-checks.sh --pylint '{posargs}'
  neutron-db-manage --subproject networking-midonet check_migration
  {[testenv:bashate]commands}
  {[testenv:bandit]commands}
whitelist_externals = bash

[testenv:cover]
basepython = python3
setenv =
  {[testenv]setenv}
  PYTHON=coverage run --source midonet --parallel-mode
commands =
  stestr run --no-subunit-trace {posargs}
  coverage combine
  coverage report --fail-under=70 --skip-covered
  coverage html -d cover
  coverage xml -o cover/coverage.xml

[testenv:venv]
basepython = python3
commands = {posargs}

[testenv:docs]
basepython = python3
commands =
    doc8 doc/source devstack releasenotes/source specs rally-jobs
    sphinx-build -W -b html doc/source doc/build/html

[testenv:bandit]
deps = -c{env:UPPER_CONSTRAINTS_FILE:https://releases.openstack.org/constraints/upper/train}
       -r{toxinidir}/tox-test-requirements.txt
commands = bandit -r midonet -x midonet/neutron/tests -n5

[testenv:bashate]
commands = bash -c "find {toxinidir}             \
         -not \( -type d -name .tox\* -prune \)  \
         -not \( -type d -name .venv\* -prune \) \
         -not \( -type d -name .tmp\* -prune \) \
         -type f                                 \
         -name \*.sh                             \
# E005 file does not begin with #! or have a .sh prefix
# E006 check for lines longer than 79 columns
# E042 local declaration hides errors
# E043 Arithmetic compound has inconsistent return semantics
         -print0 | xargs -0 bashate -v -iE006 -eE005,E042,E043"
whitelist_externals = bash

[testenv:debug]
commands = oslo_debug_helper -t midonet/neutron/tests {posargs}

[testenv:genconfig]
deps = -c{env:UPPER_CONSTRAINTS_FILE:https://releases.openstack.org/constraints/upper/train}
       -r{toxinidir}/requirements.txt
commands =
    mkdir -p etc/midonet
    oslo-config-generator --output-file etc/midonet/midonet.ini.v2.sample \
    --namespace midonet_v2
whitelist_externals = mkdir

[testenv:releasenotes]
basepython = python3
commands = sphinx-build -a -E -W -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html

[doc8]
# File extensions to check
extensions = .rst
ignore = D001

[flake8]
# TODO(dougwig) -- uncomment this to test for remaining linkages
# N530 direct neutron imports not allowed
# W503 line break before binary operator
# E402 module level import not at top of file
ignore = N530,W503,E402
# H106: Don't put vim configuration in source files
# H203: Use assertIs(Not)None to check for None
# H204: Use assert(Not)Equal to check for equality
# H205: Use assert(Greater|Less)(Equal) for comparison
# H904: Delay string interpolations at logging calls
enable-extensions=H106,H203,H204,H205,H904
show-source = true
exclude = ./.*,build,dist,rally-jobs/plugins
# flake8-import-order configurations
import-order-style = openstack
application-import-names = midonet
application-package-names = neutron,neutronclient,networking_l2gw,neutron_vpnaas,neutron_taas,neutron_dynamic_routing

[hacking]
import_exceptions = midonet.neutron._i18n
local-check-factory = neutron_lib.hacking.checks.factory


[testenv:dev]
# run locally (not in the gate) using editable mode
# https://pip.pypa.io/en/stable/reference/pip_install/#editable-installs
# note that order is important to ensure dependencies don't override
commands =
    pip install -q -e "git+https://opendev.org/x/networking-l2gw#egg=networking_l2gw"
    pip install -q -e "git+https://opendev.org/openstack/neutron-dynamic-routing#egg=neutron_dynamic_routing"
    pip install -q -e "git+https://opendev.org/openstack/neutron-vpnaas#egg=neutron_vpnaas"
    pip install -q -e "git+https://opendev.org/openstack/tap-as-a-service#egg=tap_as_a_service"
    pip install -q -e "git+https://opendev.org/openstack/neutron#egg=neutron"

[testenv:py3-dev]
basepython = python3
commands =
    {[testenv:dev]commands}
    {[testenv]commands}

[testenv:pep8-dev]
commands =
  {[testenv:dev]commands}
  {[testenv:pep8]commands}

# This environment can be used to quickly validate that all needed system
# packages required to successfully execute test targets are installed
[testenv:bindep]
basepython = python3
# Do not install any requirements. We want this to be fast and work even if
# system dependencies are missing, since it's used to tell you what system
# dependencies are missing! This also means that bindep must be installed
# separately, outside of the requirements files.
deps = bindep
commands = bindep test
